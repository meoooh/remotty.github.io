<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Remotty Tech Blog]]></title>
  <link href="http://remotty.github.io/atom.xml" rel="self"/>
  <link href="http://remotty.github.io/"/>
  <updated>2014-01-03T07:03:28+09:00</updated>
  <id>http://remotty.github.io/</id>
  <author>
    <name><![CDATA[Remotty Group]]></name>
    <email><![CDATA[admin@remotty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[active_model_serializers 젬 사용하기]]></title>
    <link href="http://remotty.github.io/blog/2013/12/31/active-model-serializers/"/>
    <updated>2013-12-31T19:51:34+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/31/active-model-serializers</id>
    <content type="html"><![CDATA[<p><code>active_model_serializers</code>젬은 레일스 API 를 작성할 때 JSON 데이터를 만들기 위해 추천되는 젬입니다.</p>

<h1>설치</h1>

<p>Gemfile 에 추가하고 bundle install 합니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem <span class="s1">&#39;active_model_serializers&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h1>Serializer 생성하기</h1>

<p>이후부터 <code>scaffolding</code>이나 <code>model generator</code>를 사용하여 특정 모델을 생성하면 자동으로 <code>serializer</code>가 만들어 집니다.</p>

<p>이미 만들어진 모델에 대해서는 아래와 같이 직접 <code>serializer</code>를 생성할 수 있습니다. 여기서는 <code>Post</code> 모델에 대한 <code>serializer</code>를 생성하는 예를 들었습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails g serializer post
</span></code></pre></td></tr></table></div></figure>


<p>이제 <code>app/serializers/post_serializer.rb</code>에서 <code>Post</code> 모델에 대한 <code>serializer</code>를 볼 수 있게 됩니다.</p>

<h1>render :json</h1>

<p>컨트롤러에서 <code>render :json</code>을 사용하면, 우선적으로 해당 객체에 대한 <code>serializer</code>를 찾아보고 있으면 해당 <code>serializer</code>를 사용하게 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>배열</h1>

<p>배열에 대해서도 <code>render :json</code>을 사용할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>렌더링되는 결과는 아래와 같습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;posts&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 1&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello!&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 2&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Goodbye!&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>디폴트로 컨트롤러의 이름이 루트 엘리먼트의 이름이 됩니다. 즉, <code>PostsController</code>는 <code>posts</code>라는 루트노드명을 만들어 줍니다. 또한 아래와 같이 루트노드명을 변경할 수도 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="s2">&quot;some_posts&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>루트 엘리먼트를 없애는 방법 4가지</h1>

<ul>
<li><p>모든 클래스에 대해서 루트 엘리먼트를 사용하지 않는 방법</p>

<p>initializer 파일을 새로 만들어 아래와 같이 추가해 줍니다.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Disable for all serializers (except ArraySerializer)</span>
</span><span class='line'>  <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable for ArraySerializer</span>
</span><span class='line'>  <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:ArraySerializer</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>컨트롤러에서 render 옵션으로 지정하는 방법</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Serializer를 상속받는 방법</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CustomArraySerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:ArraySerializer</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># controller:</span>
</span><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">CustomArraySerializer</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>컨트로러에 <code>default_serializer_options</code> 메소드를 정의하는 방법</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">default_serializer_options</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="ss">root</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Attributes와 Associations</h1>

<p>serializer 클래스에서는 속성과 관계를 지정할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Attributes</h1>

<p>attributes로 명시한 속성들에 대해서 serializer는 <code>render :json</code> 호출시에 넘겨준 액티브레코드 객체에 대해서 해당 속성들을 찾아보게 됩니다. 이 때 serializer는, <code>ActiveRecord</code> 객체가 속성을 조회하기 위해서는 사용하는 <code>read_attribute_for_serialization</code> 메소드를 이용하게 됩니다.</p>

<p>특정 객체에 대한 속성을 조회해 보기 전에, serializer는 해당 속성과 같은 이름의 메소드가 정의되어 있는지를 알아 보고 있다면 모델 속성을 포함하기 전에 해당 메소드의 결과를 속성으로 포함하게 됩니다.</p>

<p>예를 들면,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PersonSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:full_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>serializer 메소드 내에서 객체는 <code>object</code>로써 접근하게 됩니다.
따라서 속성명이 <code>object</code> 라는 이름을 가질 경우 그 이름이 감춰지게 되므로 이 때는 <code>object.object</code>로써 접근할 수 있습니다. 예를 들면,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VersionSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:version_object</span><span class="p">,</span> <span class="ss">key</span><span class="p">:</span> <span class="ss">:object</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">version_object</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">object</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>또한 <code>scope</code> 메소드를 사용할 수 있는데, 이것은 serializer에서 인증상태를 이용할 수 있게 해 줍니다. 디폴트로는 어플리케이션의 current user가 바로 이러한 인증상태에 해당하는 것이지만 다른 것으로 변경할 수도 있습니다.</p>

<p>serializer는 <code>filter</code>라는 메소드를 제공해 줍니다. 이것은 결과에 보여줄 attributes와 associations을 포함하는 배열을 반환해 줍니다. 일반적으로 이것은 <code>current_user</code>에 근거해서 결과를 다양하게 보여주기 위해서 사용합니다. 예를 들면 다음과 같습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:author</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">scope</span><span class="o">.</span><span class="n">admin?</span>
</span><span class='line'>      <span class="n">keys</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">keys</span> <span class="o">-</span> <span class="o">[</span><span class="ss">:author</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>별도의 keys 배열을 추가로 만들 필요없이, <code>keys.delete(:author)</code>를 이용하여 keys 인수를 변경하는 것이 안전할 것입니다. 주의할 것은 in-place 변경을 시도하더라도 변경된 배열을 여전히 반환할 필요가 있다는 것입니다.</p>

<p>액티브레코드 상의 이름과 다른 키를 사용하고 싶을 때는, 다른 이름의 키를 선언하고 메소드를 재정의하면 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="c1"># look up subject on the model, but use title in the JSON</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">title</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">subject</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:title</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSON 결과물에 메타 정보를 포함하고잘 할 경우에는, <code>:meta</code> 옵션을 사용하면 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">CustomArraySerializer</span><span class="p">,</span> <span class="ss">meta</span><span class="p">:</span> <span class="p">{</span><span class="ss">total</span><span class="p">:</span> <span class="mi">10</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>그러면 아래와 같은 결과를 보여 줄 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;meta&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;total&quot;</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;posts&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 1&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello!&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 2&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Goodbye!&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>또한 <code>:meta_key</code> 옵션을 사용하면 메타 키 이름을 변경할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@posts</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">CustomArraySerializer</span><span class="p">,</span> <span class="ss">meta</span><span class="p">:</span> <span class="p">{</span><span class="ss">total</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span> <span class="n">meta_key</span><span class="p">:</span> <span class="s1">&#39;meta_object&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:meta_key</code> 옵션을 사용하면 아래와 같은 결과를 보여 줄 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;meta_object&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;total&quot;</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;posts&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 1&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello!&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Post 2&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;Goodbye!&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이와 같이 메타 정보를 이용할 경우에는, serializer는 <code>{ root: false }</code> 옵션을 가질 수 없습니다. 결국 유효하지 않는 JSON 데이터를 반화하기 때문에 루트 키가 없는 경우에는 메타 정보가 무시될 것입니다.</p>

<p>attribute 직렬화 과정을 직접 로우레벌에서 조작하고자 할 경우에는, <code>attributes</code> 메소드를 덮어쓰기해서 해시를 반환해 주면 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PersonSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attributes</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">scope</span><span class="o">.</span><span class="n">admin?</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;ssn&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="n">ssn</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;secret&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="n">mothers_maiden_name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Associations</h1>

<p>association을 사용할 경우, serializer가 해당 association을 찾아보고 연관객체의 각 엘리먼트를 직렬화하게 됩니다. 예를 들어, <code>has_many :comments</code> 라고 지정하면 각 comment 객체에 대해서 CommentSerializer 객체를 만들어서 직렬화하게 되는 것입니다.</p>

<p>디폴트 상태에서는 오리지날 객체에 대해서 선언되어 있는 association을 찾게 됩니다. 그러나 해당 association 이름과 동일한 메소드를 정의하여 반환되는 객체들을 변경할 수 있습니다. 이것은 특정 scope(current_user와 같은)에 국한된 객체들을 반환할 때 사용하면 도움이 될 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># only let the user see comments he created.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comments</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">created_by</span><span class="p">:</span> <span class="n">scope</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>이 경우에도 attributes와 같이 JSON 키를 변경할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># look up comments, but use +my_comments+ as the key in JSON</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="ss">:my_comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>또한 attributes와 같이, <code>filter</code> 메소드를 정의하면, 결과로써 포함할 associations을 지정할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keys</span><span class="o">.</span><span class="n">delete</span> <span class="ss">:comments</span> <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">comments_disabled?</span>
</span><span class='line'>    <span class="n">keys</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>또는</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:author</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'>    <span class="n">keys</span><span class="o">.</span><span class="n">delete</span> <span class="ss">:author</span> <span class="k">unless</span> <span class="n">scope</span><span class="o">.</span><span class="n">admin?</span>
</span><span class='line'>    <span class="n">keys</span><span class="o">.</span><span class="n">delete</span> <span class="ss">:comments</span> <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">comments_disabled?</span>
</span><span class='line'>    <span class="n">keys</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>:serializer</code> 옵션을 이용하여 커스텀 serializer 클래스를 지정할 수 있고 <code>:polymorphic</code> 옵션을 지정하여 해당 association이 polymorphic 이라는 것을 알려줄 수 있습니다.</p>

<p>serializer에서는 <code>belongs_to</code> association을 <code>has_one</code>을 이용하여 포함하게 된다는 것을 주의해야 합니다.</p>

<h1>Embedding Associations</h1>

<p>디폴트 상태에서는 associations가 serializer 객체에 포함(embeded)됩니다. 그래서 하나의 post 가 있다고 가정할 때 다음과 같은 결과를 볼 수 있게 될 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comments&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;what a dumb post&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이러한 결과물은 간단한 경우에는 편리하지만, 복잡한 association이 존재할 경우에는 해당 association 에 대해서 ID이 구성된 배열을 포함하는 것이 더 좋을 것입니다. 이것은 전체적인 퍼포먼스 측면에서도 그렇고 불필요한 중복을 피할 수 있어서 좋습니다.</p>

<p>이를 위해서 <code>embed</code>라는 클래스 메소드를 사용하면 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">embed</span> <span class="ss">:ids</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>이제 association들이 ID들로 구성된 배열을 포함하게 될 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comment_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>다른 방법으로는 클래스내의 측정 association에 대해서만 ID 또는 객체 배열만을 포함할 수 있게 할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">embed</span><span class="p">:</span> <span class="ss">:objects</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">embed</span><span class="p">:</span> <span class="ss">:ids</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>따라서 JSON 데이터는 다음과 같이 보일 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comments&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;what a dumb post&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;tag_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>게다가, ID 만을 포함하는 것 외에도 메인 객체에 데이터를 추가로 포함할 수도 있습니다. 이렇게 하므로써 포함된 정보를 검색하기 위해서 트리구조를 스캔할 필요없이 전체 데이터 패키지를 보다 쉽게 처리할 수 있게 될 것입니다. 또한 객체사이에 (tags와 같이) 공유되는 associations들은 전체 로드시에 단 한번만 전달된다는 것입니다.</p>

<p>아래와 같이 데이터가 포함되도록 명시할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">embed</span> <span class="ss">:ids</span><span class="p">,</span> <span class="kp">include</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>이 때 comments 객체가 <code>has_many :tags</code> association이 선언되어 있다고 가정하면, 다음과 같은 JSON 데이터를 얻게 될 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comment_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;comments&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;what a dumb post&quot;</span><span class="p">,</span> <span class="s2">&quot;tag_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;i liked it&quot;</span><span class="p">,</span> <span class="s2">&quot;tag_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="s2">&quot;tags&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;short&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;whiny&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;happy&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>위에서와 같이 데이터를 추가로 로드할 경우에는 <code>{ root: false }</code> 옵션을 사용할 수 없습니다. 이 옵션을 지정할 경우에는 유효하지 않은 JSON 데이터를 만들게 되기 때문입니다. 따라서 이 옵션을 지정하게 되면 <code>include</code> 옵션이 작동하지 않게 됩니다.</p>

<p>또한 포함된 객체에 대해서는 참조하는 키외의 다른 루트를 지정할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">embed</span> <span class="ss">:ids</span><span class="p">,</span> <span class="kp">include</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">key</span><span class="p">:</span> <span class="ss">:comment_ids</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="ss">:comment_objects</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>이것은 다음과 같은 JSON 데이터를 민들게 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comment_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="mi">1</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;comment_objects&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;what a dumb post&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>또한 포함된 객체의 ID외의 다른 속성을 지정할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">embed</span> <span class="ss">:ids</span><span class="p">,</span> <span class="kp">include</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="n">embed_key</span><span class="p">:</span> <span class="ss">:external_id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>이것은 다음과 같은 JSON 데이터를 만들게 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;post&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;New post&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;A body!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;comment_ids&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;COMM001&quot;</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;comments&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;external_id&quot;</span><span class="o">:</span> <span class="s2">&quot;COMM001&quot;</span><span class="p">,</span> <span class="s2">&quot;body&quot;</span><span class="o">:</span> <span class="s2">&quot;what a dumb post&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: <code>embed :ids</code> 기전은 주로 데이터를 대량으로 처리해서 로컬 저장소에 로드할 경우에 유용합니다. 이와 같은 경우에, 정보검색을 위해서 데이터를 반복적으로 스캔할 필요없이 종류별로 모든 데이터를 쉽게 볼 수 있다는 것은 매우 유용한 기능입니다.</p>

<p>대부분의 경우 간단히 시나리오 하에 데이터 작업을 하고 직접 Ajax 요청을 할 경우에는 아마도 디폴트 상태의 embed 기능을만을 사용하면 될 것입니다.</p>

<h1>Scope 커스터마이징하기</h1>

<p>특정 serializer 클래스에서 대해서, <code>current_user</code> 는 <code>render :json</code> 을 호출할 때 컨트롤러가 해당 serializer에 제공하는 인증 scope에 해당합니다. 디폴트로, 이것은 <code>current_user</code>가 되지만, 컨트롤러에서 <code>serialization_scope</code>을 호출하여 이 scope을 변경할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">serialization_scope</span> <span class="ss">:current_admin</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>위의 예는 scope을 <code>current_user</code>에서 <code>current_admin</code>으로 변경하게 될 것입니다.</p>

<p>주목할 것은, 지금까지 볼 때, <code>serialization_scope</code>은 두번째 인수를 지정하여, 해당 scope을 적용할 액션들을 지정할 수 없습니다.</p>

<p>즉, 아래와 같이 액션들을 지정할 수 없다는 것입니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">serialization_scope</span> <span class="ss">:current_admin</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>따라서 대신에 아래와 같이 처리할 수 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CitiesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">serialization_scope</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@cities</span> <span class="o">=</span> <span class="no">City</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@cities</span><span class="p">,</span> <span class="n">each_serializer</span><span class="p">:</span> <span class="no">CitySerializer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@city</span> <span class="o">=</span> <span class="no">City</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@city</span><span class="p">,</span> <span class="ss">scope</span><span class="p">:</span> <span class="n">current_admin</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>위에 예에서, <code>current_admin</code> 메소드가 데이터베이스에서 현재 사용자를 조회할 필요가 있다고 가정한다면, 이러한 방식의 접근방식을 통해서, <code>serailization_scope</code>값은 <code>nil</code>로 지정하므로써, <code>index</code> 액션이 더 이상 데이터베이스를 조회하기 않고 단지, <code>show</code> 액션만이 해당 메소드를 실행하게 되는 것입니다.</p>

<h1>Testing</h1>

<p>임의의 serializer 클래스를 테스트하기 위해서는, 단지 해당 serializer 클래스에 대해서 <code>.new</code> 메소드를 호출하여 모델 클래스 객체를 넘겨 주면 됩니다.</p>

<h2>MiniTest</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TestPostSerializer</span> <span class="o">&lt;</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@serializer</span> <span class="o">=</span> <span class="no">PostSerializer</span><span class="o">.</span><span class="n">new</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;some title&#39;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s1">&#39;some text&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_special_json_for_api</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="s1">&#39;{&quot;post&quot;:{&quot;id&quot;:123,&quot;title&quot;:&quot;some title&quot;,&quot;body&quot;:&quot;some text&quot;}}&#39;</span><span class="p">,</span> <span class="vi">@serializer</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RSpec</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">PostSerializer</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;creates special JSON for the API&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">serializer</span> <span class="o">=</span> <span class="no">PostSerializer</span><span class="o">.</span><span class="n">new</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;some title&#39;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="s1">&#39;some text&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;{&quot;post&quot;:{&quot;id&quot;:123,&quot;title&quot;:&quot;some title&quot;,&quot;body&quot;:&quot;some text&quot;}}&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>수고하셨습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hub로 커맨드라인에서 Github pull-request 보내기]]></title>
    <link href="http://remotty.github.io/blog/2013/12/29/hub-and-pull-request/"/>
    <updated>2013-12-29T15:31:32+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/29/hub-and-pull-request</id>
    <content type="html"><![CDATA[<p>오픈소스를 비롯해 git를 사용해 소스 코드의 버전관리를 하는 경우엔 원격 git 저장소로 Github를 많이 사용합니다. Github는 단순히 git 저장소 역할을 하는 것뿐만 아니라 웹 인터페이스를 통해서 저장소를 관리할 수 있게 도와주며, 소스코드를 공유하고 협업하기 위한 다양한 기능을 제공합니다.</p>

<!--more-->


<p>예를 들어서 다른 사람이 만든 저장소를 자신의 계정에 fork해서 별도로 관리할 수 있고, 이렇게 fork해서 수정한 저장소의 브랜치를 pull-request를 통해서 원래의 저장소에 통합하도록 요청할 수도 있습니다. 이외에도 이슈 관리와 위키를 비롯한 매우 다양한 기능들이 지원됩니다. 이러한 Github의 장점들은 단순히 git을 활용한 좋은 버전관리 시스템이라는 것을 넘어서 프로젝트 관리를 위한 도구로서 Github 서비스를 차별화 시켜줍니다.</p>

<p>하지만 대부분의 기능들은 기본적으로 웹인터페이스로만 사용할 수 있다는 단점이 있습니다. Git의 가장 기본적인 클라이언트 프로그램은 git 명령어로 커맨드라인에서 사용할 수 있습니다. 하지만 Github는 일차적으로 웹서비스로서 부가적인 기능들을 웹을 통해서 제공합니다. GUI나 화면에 익숙한 분들에게는 이러한 면은 또다른 장점이 될 수도 있겠지만, 커맨드 라인에서 직접 git 명령어를 입력하고, 저장소의 상태를 확인하는 사람들에게는 워크 플로우가 웹과 커맨드라인으로 나눠진다는 게 영 장점이지만은 않습니다.</p>

<p>물론 Github에서 제공하는 API를 직접 이용하는 방법도 있긴있겠습니다만, 매우 번거로운 작업입니다. Github에서는 이러한 문제를 해결하기 위해서 저장소 생성, 포크 및 풀리퀘스트 등 주요한 기능을 커맨드라인 인터페이스로 제공해주는 Hub라는 git 명령어의 확장 인터페이스를 제공하고 있습니다. <a href="https://github.com/github/hub">Hub</a>라는 이름은 git + hub = Github 라는 공식에서 나온 이름도 참 앙증맞습니다.</p>

<p>이 글은 Hub를 설치하고 실제 커맨드라인에서 풀리퀘스트를 보내는 과정을 다룹니다. 기본적으로 Github의 풀리퀘스트 기능 정도는 익숙하다는 걸 전제로(최소한 개념 정도는 이해하고 있다는 전제로) 이야기합니다.</p>

<h1>Hub 설치</h1>

<p>먼저 Hub를 사용하기 위해서는 공식 홈페이지를 참조해 프로그램을 설치해줄 필요가 있습니다. 우선 hub는 git과 ruby에 의존적인 프로그램이므로 시스템에 이러한 프로그램들이 있는지 확인해야합니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git -v
</span><span class='line'>git version 1.8.3.2
</span><span class='line'><span class="c"># git 1.7.3 이상 필요!</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ruby -v
</span><span class='line'>ruby 2.1.0p0 <span class="o">(</span>2013-12-25 revision 44422<span class="o">)</span> <span class="o">[</span>x86_64-linux<span class="o">]</span>
</span><span class='line'><span class="c"># ruby 1.8.6 이상 필요!</span>
</span></code></pre></td></tr></table></div></figure>


<p>위의 프로그램들이 설치돼있다면 이제 Hub를 설치할 차례입니다. 맥에서는  Homebrew[^brew]를 이용해 hub를 쉽게 설치할 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install hub
</span></code></pre></td></tr></table></div></figure>


<p>리눅스 계열에서는 소스 코드를 다운로드 받아 직접 설치할 수 있습니다. 아래 과정을 따라 hub를 설치할 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/github/hub.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hub
</span><span class='line'><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure>


<p>설치 시 ruby의 <code>rake</code> 명령어가 지원되어야합니다. <code>rake</code> 명령어가 없다면 <code>gem install rake</code>로 먼저 rake를 설치해주시기 바랍니다. 또한 <code>rake install</code> 명령어 실행시 기본적으로 메인 시스템 상에 프로그램을 설치하므로 <code>sudo</code> 등을 붙여 관리자 권한으로 설치해야할 수도 있습니다.</p>

<p>설치가 정상적으로 끝났다면 아래와 같이 <code>hub</code> 명령어를 사용할 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>hub --version
</span><span class='line'>git version 1.8.3.2
</span><span class='line'>hub version 1.11.1
</span></code></pre></td></tr></table></div></figure>


<p>hub는 <code>hub</code> 명령어를 통해서 독자적으로 사용할 수도 있지만 <code>git</code> 명령어와 통합해서 사용할 수도 있습니다. <code>hub alias</code> 명령어를 실행하면 <code>git</code> 명령어와 통합하는 방법을 알려줍니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Wrap git automatically by adding the following to ~/.zshrc:</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(hub alias -s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>예를 들어 zsh 사용하고 있다면 <code>~/.zshrc</code> 파일에, bash를 사용하고 있다면 <code>~/.bash_profile</code> 파일에 <code>eval "$(hub alias -s)"</code>을 추가해주면 쉘 초기화 시에 git와 hub 명령어를 통합시켜줍니다. git와 hub 명령어는 기능적으로는 겹치지 않으며, hub가 git를 보완하는 역할을 하고 있으므로 이렇게 사용하더라도 별다른 문제가 되지 않습니다.</p>

<p>이제 설치가 끝났으니 쉘을 재실행 시켜줍니다. git 명령어를 통해서 제대로 alias 되었는지 확인합니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.8.3.2
</span><span class='line'>hub version 1.11.1
</span></code></pre></td></tr></table></div></figure>


<h1>쉘에서 Hub 자동 완성 사용하기</h1>

<p>Hub에서는 쉘에서 명령어 및 옵션 자동 완성을 위한 completion 파일을 제공하고 있습니다. 여기서 zsh을 기준으로 git 명령어의 자동완성을 확장하는 법을 설명합니다. 먼저 hub 자동 완성 파일을 다운로드 받아 적절한 위치(우분투의 경우 기본적으로  <code>usr/local/share/zsh/site-functions</code> 디렉토리. 정확한 위치는 각 운영체제 별 zsh 환경 설정 파일 위치에 따릅니다)에 복사해줍니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir ~/src
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/src
</span><span class='line'><span class="nv">$ </span>wget https://raw.github.com/github/hub/master/etc/hub.zsh_completion
</span><span class='line'><span class="nv">$ </span>sudo mv hub.zsh_completion /usr/share/zsh/site-functions/_hub
</span></code></pre></td></tr></table></div></figure>


<p>zsh을 다시 실행하면 아래와 같이 hub 명령어 사용시 자동완성이 적용되는 것을 알 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>hub pull&lt;TAB&gt;
</span><span class='line'>pull          -- fetch from and merge with another rep....
</span><span class='line'>pull-request  -- open a pull request on GitHub
</span></code></pre></td></tr></table></div></figure>


<p><code>git</code> 명령어와 통합해서 사용중인 경우에는 .zshrc에 아래 라인을 추가해 git 명령어에서도 hub 명령어의 자동완성을 사용할 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>compdef <span class="nv">git</span><span class="o">=</span>hub
</span></code></pre></td></tr></table></div></figure>


<p>아래와 같이 자동 완성이 적용된 것을 확인할 수 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git pull&lt;TAB&gt;
</span><span class='line'>pull          -- fetch from and merge with another rep....
</span><span class='line'>pull-request  -- open a pull request on GitHub
</span></code></pre></td></tr></table></div></figure>


<h1>Hub 사용하기</h1>

<p>Hub의 다양한 명령어에 대해서는 공식 저장소에 간략한 사용법들이 나와있습니다. 여기서는 Hub를 사용해 Github에 저장소를 만들어보고, Github의 핵심 기능중 하나인 풀리퀘스트를 실제로 보내보겠습니다. (단, 여기서는 같은 저장소의 브랜치간에 풀리퀘스트를 보냅니다.)</p>

<p>먼저 Git 저장소를 가진 디렉토리를 하나 생성해줍니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/home/nacyot/prog/github/nacyot/
</span><span class='line'><span class="nv">$ </span>mkdir pull-request <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'>Initialized empty Git repository in/home/nacyot/prog/github/nacyot/pull-request/.git/
</span><span class='line'><span class="nv">$ </span>git create
</span><span class='line'>Updating origin
</span><span class='line'>created repository: nacyot/pull-request
</span></code></pre></td></tr></table></div></figure>


<p>일반적으로 Git 저장소를 초기화할 때는 <code>git init</code> 명령어를 사용합니다. 여기서는 추가적으로 <code>git create</code> 명령어를 사용했습니다. 이 명령어는 hub를 통해 확장된 명령어로 현재 git 저장소로 Github에 저장소를 생성해줍니다. <code>git remote</code> 원격 저장소 설정이 제대로 되었는지 확인해보겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git remote -v
</span><span class='line'>origin  git@github.com:nacyot/pull-request.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin  git@github.com:nacyot/pull-request.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>이를 통해서 Github <a href="http://github.com/nacyot">nacyot</a> 계정에 <a href="http://github.com/nacyot/pull-request">pull-request 저장소</a>가 추가되었다는 것을 알 수 있습니다.</p>

<p>우선 master 브랜치를 활성화시키기 위해 커밋을 하나 해보겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>touch README.md
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m<span class="s1">&#39;Add README.md&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span><span class='line'>
</span><span class='line'>Counting objects: 3, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, 221 bytes | 0 bytes/s, <span class="k">done</span>.
</span><span class='line'>Total 3 <span class="o">(</span>delta 0<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:nacyot/pull-request.git
</span><span class='line'>* <span class="o">[</span>new branch<span class="o">]</span>      master -&gt; master
</span></code></pre></td></tr></table></div></figure>


<p>이 명령어들은 일반적으로 git에서 사용하는 명령어들입니다. 이제 파일들이 정상적으로 추가되었는지를 확인하기 위해 이 저장소의 웹페이지를 띄워보겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git browse
</span></code></pre></td></tr></table></div></figure>


<p><code>git browse</code> 명령어도 hub 확장으로 현재 디렉토리에 위치한 git 저장소의 원격 저장소를 근거로 Github 페이지를 찾아 바로 웹브라우져를 열어줍니다. 이 명령어를 통해서 따로 웹브라우져를 실행시키지 않더라도 저장소의 Github 페이지를 바로 확인할 수 있습니다.</p>

<p><img src="http://remotty.github.io/images/2013-12-29-hub-and-pull-request/repository.png" alt="repository" /></p>

<p>이제 pull-request 브랜치를 만들고 실제로 풀리퀘스트를 보내보도록 하겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout -b pull-request
</span><span class='line'><span class="nv">$ </span>git touch hello.rb
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m<span class="s1">&#39;Add hello.rb&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin pull-request
</span></code></pre></td></tr></table></div></figure>


<p>위의 명령어들 역시 git에서 일반적으로 사용하는 명령어들로 추가적인 설명은 생략하겠습니다. 간단히만 얘기하면 pull-request 브랜치를 만들고 <code>hello.rb</code> 파일을 추가하고 Github 저장소에도 추가했습니다. 이제 nacyot/pull-request 에는 master 브랜치와 pull-request 두 브랜치가 존재합니다.</p>

<p>여기서는 pull-request 브랜치에서 master 브랜치로 풀리퀘스트를 보내겠습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git pull-request
</span></code></pre></td></tr></table></div></figure>


<p><code>git pull-request</code> 명령어를 실행시키면 현재 디렉토리의 github 저장소와 브랜치를 기준으로 풀리퀘스트를 보내기 위한 메시지를 입력할 수 있도록 기본 에디터를 실행해줍니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>First pull-request
</span><span class='line'>
</span><span class='line'><span class="c"># Requesting a pull to nacyot:master from nacyot:pull-request</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Write a message for this pull request. The first block</span>
</span><span class='line'><span class="c"># of text is the title and the rest is description.</span>
</span></code></pre></td></tr></table></div></figure>


<p>주석을 통해서 풀리퀘스트가 어디로 보내지는지 확인할 수 있습니다. 풀리퀘스트 메시지를 완성하고 저장한 후 에디터를 종료하면 풀리퀘스트가 보내집니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://github.com/nacyot/pull-request/pull/1
</span></code></pre></td></tr></table></div></figure>


<p>풀리퀘스트를 보내는데 성공하면 위와 같이 풀리퀘스트의 url을 보여줍니다.</p>

<p><img src="http://remotty.github.io/images/2013-12-29-hub-and-pull-request/pull-request.png" alt="pull-request" /></p>

<p><code>git pull-request</code> 명령어는 아래와 같이 좀 더 명시적으로 사용할 수도 있습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git pull-request -m <span class="s1">&#39;First pull-request&#39;</span> -b nacyot:master -h nacyot:pull-request
</span><span class='line'>https://github.com/nacyot/pull-request/pull/1
</span></code></pre></td></tr></table></div></figure>


<p>여기서 <code>-m</code> 플래그는 풀리퀘스트 메시지, <code>-b</code> 플래그는 풀리퀘스트 목적지, <code>-h</code> 플래그는 풀리퀘스트를 보내는 브랜치가 됩니다. <code>-b</code>와 <code>-h</code> 플래그는 <code>&lt;계정명&gt;:&lt;브랜치명&gt;</code> 형식으로 기술하며, 저장소는 작업 디렉토리 저장소를 근거로 자동으로 유추됩니다. 마찬가지로 풀리퀘스트에 성공하면 풀리퀘스트의 url을 보여줍니다.</p>

<h1>결론</h1>

<p>여기까지 git 명령어를 hub로 확장해서 커맨드라인에서 Github 작업을 좀 더 편하게 하는 방법을 소개했습니다. hub는 웹에서 해야하는 귀찮은 일들을 많이 덜어주는 프로그램입니다. Github에서 저장소를 만들고 풀리퀘스트를 보내려고 웹상에서 브랜치 지정해주고 하는 일은 간단한 작업이지만 꽤나 번거롭습니다. 특히 해당 &lsquo;저장소&#8217;를 찾아서 들어가는 일도 반복되면 귀찮기만 한 일입니다. hub와 함께 좀 더 즐거운 Github 라이프가 되길 바랍니다 >_&lt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[비디오 동영상 쪼개기]]></title>
    <link href="http://remotty.github.io/blog/2013/12/29/split-video/"/>
    <updated>2013-12-29T07:31:32+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/29/split-video</id>
    <content type="html"><![CDATA[<p>맥 환경에서는 <code>homebrew</code>를 이용하면 <code>ffmpeg</code>를 쉽게 설치할 수 있습니다.</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install ffmpeg</span></code></pre></td></tr></table></div></figure>


<p>제법 시간이 걸리지만 기다릴만 합니다.</p>

<p>동영상을 쪼개는 command line 명령과 옵션은 아래와 같습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ffmpeg -v quiet -y
</span><span class='line'>  -i [original file name]
</span><span class='line'>  -vcodec copy -acodec copy -ss 00:00:00 -t 00:25:00 -sn [split1 file name]
</span><span class='line'>  -vcodec copy -acodec copy -ss 00:25:00 -t 00:54:25 -sn [split2 file name]</span></code></pre></td></tr></table></div></figure>


<p>아래에 이를 이용한 예를 소개 합니다.</p>

<p>ex 1) 1시간 44분 25초 크기의 remotty_3rd_hangout.mp4 동영상 파일을 50분 크기로 쪼개고자 할 때.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ffmpeg -v quiet -y -i remotty_3rd_hangout.mp4 -vcodec copy -acodec copy -ss 00:00:00 -t 00:50:00 -sn remotty3_1.mp4 -vcodec copy -acodec copy -ss 00:50:00 -t 01:44:25 -sn remotty3_2.mp4</span></code></pre></td></tr></table></div></figure>


<p>ex 2) 50분짜리 remotty3_1.mp4 동영상 파일을 25분 크기로 쪼개고자 할 때</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ffmpeg -v quiet -y -i remotty3_1.mp4 -vcodec copy -acodec copy -ss 00:00:00 -t 00:25:00 -sn remotty3_part1.mp4 -vcodec copy -acodec copy -ss 00:25:00 -t 00:50:00 -sn remotty3_part2.mp4</span></code></pre></td></tr></table></div></figure>


<p>ex 3) 54분 25초 크기의 remotty3_2.mp4 동영상 파일을 25분 크기로 쪼개고자 할 때</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ffmpeg -v quiet -y -i remotty3_2.mp4 -vcodec copy -acodec copy -ss 00:00:00 -t 00:25:00 -sn remotty3_part3.mp4 -vcodec copy -acodec copy -ss 00:25:00 -t 00:54:25 -sn remotty3_part4.mp4</span></code></pre></td></tr></table></div></figure>


<h4>정말 순식간에 re-rendering 과정없이 동영상 파일이 쪼개지는군요. ㅎㅎㅎ</h4>

<p>레퍼런스 : <a href="http://stackoverflow.com/a/19300561/1217633">http://stackoverflow.com/a/19300561/1217633</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github을 통한 협업]]></title>
    <link href="http://remotty.github.io/blog/2013/12/23/githubeul-tonghan-hyeobeob/"/>
    <updated>2013-12-23T22:17:44+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/23/githubeul-tonghan-hyeobeob</id>
    <content type="html"><![CDATA[<p>github을 통합 협업시 필요한 셋팅입니다.</p>

<!-- more -->


<ul>
<li><p>원본 repository를 본인 계정으로 fork하고 작업합니다.</p></li>
<li><p>user.name &amp; user.email 설정</p>

<ul>
<li>github 정보와 동일하게 user.name과 user.email을 설정합니다.</li>
</ul>
</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config user.name “subicura<span class="err">&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config user.email “subicura@subicura.com”
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>upstream 설정</p>

<ul>
<li>원본 repository와 소스를 동기화 하기 위해 upstream을 설정합니다.</li>
<li><a href="https://help.github.com/articles/syncing-a-fork">https://help.github.com/articles/syncing-a-fork</a></li>
</ul>
</li>
<li><p>pull request 관련 설정</p>

<ul>
<li>git의 branch를 이용해서 테스트해볼 수 있습니다.</li>
<li><a href="https://gist.github.com/piscisaureus/3342247">https://gist.github.com/piscisaureus/3342247</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[모델 Spec 작성하기]]></title>
    <link href="http://remotty.github.io/blog/2013/12/18/model-spec/"/>
    <updated>2013-12-18T09:17:57+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/18/model-spec</id>
    <content type="html"><![CDATA[<p>Rails 어플리케이션에서 모델은 해당 어플리케이션의 주요 핵심 로직으로 구성되어 있습니다.
따라서, TDD를 이용한 Test 기반 개발을 할 때도 모델에 대한 Test를 중점적으로 시행하는 것은 당연한 일일 것입니다.</p>

<!--more-->


<p>이를 위해서는, TDD에 관한 여러 가지 책이 있지만, 저의 경우는 Aaron Sumner의 &ldquo;Everday Rails Testing with RSpec(<a href="https://leanpub.com/everydayrailsrspec">https://leanpub.com/everydayrailsrspec</a>)&#8221;가 쉽게 이해가 되더군요.</p>

<p>이 책의 내용 중 모델 챕터를 보면 쉽게 따라해 볼 수 있습니다.</p>

<p>TDD를 위한 젬 중에 대표적인 것은 <code>RSpec</code> 입니다. 이 젬을 중심으로 TDD를 위한 환경구축을 위해서 Aaron이 추천하는 젬 구성은 아래와 같습니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.14.0.rc1&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;factory_girl_rails&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 4.2.1&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;faker&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.1.2&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capybara&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.1.0&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;database_cleaner&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.0.1&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;launchy&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.3.0&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>각 모델에 대해서는 아래의 3가지 정도를 test해 보면 됩니다.</p>

<ul>
<li>해당 모델의 <code>create</code> 메소드에 유효한 데이터를 넘겨 주면 에러 없이 모델 객체가 생성됨.</li>
<li>해당 모델에 유효하지 않는 데이터를 넘겨 주면 유효성 검증에서 실패함.</li>
<li>해당 모델의 클래스 메소드나 인스턴스 메소드가 원하는 대로 결과를 만들어 냄.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[meeting]]></title>
    <link href="http://remotty.github.io/blog/2013/12/15/meeting/"/>
    <updated>2013-12-15T01:07:20+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/15/meeting</id>
    <content type="html"><![CDATA[<p>오늘 6명(+1명)이 행아웃을 하면서 느낀점입니다.</p>

<!-- more -->


<p>행아웃은 리모트로 일하면서 유일하게 얼굴을 보면서 이야기 할 수 있는 시간 입니다.
흔치 않은 기회(?)라 다양한 이야기를 나누게 되는데 그러다 보니 의도치 않게 시간이 너무 걸립니다.
2시간을 했다고 하면 6명*2시간=12시간을 미팅하는데 쓴 셈인데..</p>

<p>다음 행아웃에서는 주제를 최소로 하고 페이스북이나 채팅으로 해결할 수 있는 문제는 그 전에 처리하기로 했습니다.
항상 시간을 효율적으로 쓸 수 있게 노력해야겠습니다 ㅠ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install theme]]></title>
    <link href="http://remotty.github.io/blog/2013/12/10/install-theme/"/>
    <updated>2013-12-10T23:00:55+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/10/install-theme</id>
    <content type="html"><![CDATA[<p>octopress에 테마를 추가하는 방법은 아주 간단합니다.</p>

<!--more-->


<p>일단 theme 리스트는 다음 링크에서 확인하시고..</p>

<p><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></p>

<p><a href="http://www.evolument.com/blog/2013/03/02/top-10-plus-octopress-themes/">http://www.evolument.com/blog/2013/03/02/top-10-plus-octopress-themes/</a></p>

<p>설치는 아래와 같이 하면 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd [octopress directory]
</span><span class='line'>git clone [theme git주소] .themes/[theme 이름]
</span><span class='line'>rake install['theme 이름']
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>zsh 사용시 에러가 발생한다면</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd [octopress directory]
</span><span class='line'>git clone [theme git주소] .themes/[theme 이름]
</span><span class='line'>rake "install[theme 이름]"
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>다음과 같이 합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert Author]]></title>
    <link href="http://remotty.github.io/blog/2013/12/10/insert-author/"/>
    <updated>2013-12-10T22:46:31+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/10/insert-author</id>
    <content type="html"><![CDATA[<p>octopress는 한 블로그에 글쓴이가 여러명일 경우 작성자를 따로 입력할 수 있습니다.</p>

<!--more-->


<p>post글 상단 정보에 <code>author: Your Name</code>을 입력하면 되고</p>

<p>글 수정시에는 author에 이름을 추가하는 식으로 작업하면 될 것 같습니다.</p>

<p>지금 이 글을 예로 들면 다음과 같습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "Insert Author"
</span><span class='line'>date: 2013-12-10 22:46:31 +0900
</span><span class='line'>comments: true
</span><span class='line'>categories: [octopress]
</span><span class='line'>author: 김충섭
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert 'more' link]]></title>
    <link href="http://remotty.github.io/blog/2013/12/10/insert-more-link/"/>
    <updated>2013-12-10T22:17:53+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/10/insert-more-link</id>
    <content type="html"><![CDATA[<p>블로그 인덱스 페이지에서는 각 포스트의 한 문장만 보이게 방법이 있습니다.
인덱스 페이지에서 해당 포스트의 모든 내용이 보이면 한 화면에서 여러개의 포스트를 볼 수 없겠죠.</p>

<p>요령은 글 내용 중에서 한 문장이 끝나는 다음 줄에 아래의 표시를 삽입해 주면 인덱스 페이지에서는 자동으로 <code>more</code> 링크가 생성되면 한 문장만 보이게 됩니다. <code>more</code>버튼을 클릭하면 전체 글 내용을 볼 수 있게 됩니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- more --&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remotty하게 일하기]]></title>
    <link href="http://remotty.github.io/blog/2013/12/10/remottyhage-ilhagi/"/>
    <updated>2013-12-10T21:27:30+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/10/remottyhage-ilhagi</id>
    <content type="html"><![CDATA[<p>이 포스트를 통해 Remotty 그룹에서 협업하는 방식을 소개합니다.<br/>
혹시 더 효율적이고 세련된 방식으로 일하고 계시거나 알고 계신 분들은 댓글이나 메일로 한수 가르쳐주시면 감사하겠습니다 ^^<br/>
<a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x72;&#101;&#109;&#x6f;&#x74;&#x74;&#x79;&#46;&#x63;&#x6f;&#109;">&#97;&#x64;&#109;&#x69;&#110;&#x40;&#114;&#101;&#109;&#x6f;&#x74;&#x74;&#121;&#46;&#x63;&#x6f;&#x6d;</a></p>

<!-- more -->


<h5>잡다구리한 이야기들</h5>

<p>가벼운 생각들, 각종 팁, 유용한 지식 등 온갖 잡다구리한 정보들은 <strong>페이스북 그룹에 포스팅</strong> 한다.<br/>
멤버들은 각자 자신의 생각들을 댓글을 통해 등록을 하면서 점점 그 생각들을 발전시켜 나간다.<br/>
무언가를 결정할 사항이 생겼을 땐, 페이스북 설문조사 기능을 활용한다.<br/>
아이디어로 이어가고 싶은 것들은 trello에 등록을 하여 점점 구체화시켜 나간다.</p>

<h5>대화 &amp; 논의</h5>

<p>대화를 통해 실시간 논의가 필요한 경우는 가겹게 <strong>페이스북 메신저</strong>를 활용한다.<br/>
대부분의 이야기들이 페이스북 타임라인에서 오고가기 때문에 페이스북 메신저를 사용하여 대화하는 것이 편리하다.<br/>
페이스북 메신저를 통한 대화는 시간, 장소에 관계없이 필요성을 느끼는 누군가가 먼저 시작을 하면 된다.<br/>
좀 더 진지하게 집중적으로 논의를 해야 할 경우엔 <strong>구글 행아웃</strong>을 활용한다.</p>

<h5>태스크 관리</h5>

<p>태스크 관리는 <strong>trello</strong>를 활용한다.<br/>
Jira, Redmine과 같은 이슈트래커 도구는 태스크 관리 도구로는 쓸데없이 무겁다.<br/>
태스크 관리 뿐만 아니라, 구체화 시켜나갈 아이디어가 있을때에도 trello에 등록을 한다.</p>

<h5>문서 공유</h5>

<p>문서 공유는 에버노트와 구글드라이브를 사용한다.<br/>
<strong>임시적인 성격의 문서, 메모등의 글들은 에버노트를 사용</strong>하고, <strong>산출물 성격의 문서들은 구글 드라이브를 사용한</strong>다.<br/>
에버노트가 문서를 작성하기는 편하지만, 공동 작업이 불가능한 단점이 있다.<br/>
그래서 산출물 성격의 문서는 구글드라이브로 관리한다.</p>

<h5>기타 파일 공유</h5>

<p>소스코드, 문서 이외의 기타 파일은 <strong>dropbox</strong>를 사용한다.<br/>
주로 디자이너와 협업을 위한 파일 공유로 많이 사용한다.</p>

<h5>단체코딩</h5>

<p><strong>MadEye</strong>(<a href="https://madeye.io">https://madeye.io</a>)를 통해 정기적으로 단체 코딩을 한다.<br/>
여러 사람이 같은 화면을 보며 함께 코딩을 할 수 있고, 구글 행아웃과도 연결되기 때문에 서로 대화하면 함께 코딩할 수 있다.<br/>
굉장히 재밌고 편리하게 pair programming을 할 수 있는 도구이다.</p>

<h5>소스 관리</h5>

<p>소스 관리는 <strong>github</strong>가 정답이다. 이보다 편할 순 없다!</p>

<h5>블로그</h5>

<p>그룹 내에서 습득한 지식은 가능한 tech blog에 정리하여 공유하고 있다.<br/>
<strong>octopress</strong>를 사용하여 작성을 하고 github page(<a href="http://remotty.github.io">http://remotty.github.io</a>)에 올려 공유한다.</p>

<h4>시도중</h4>

<p>현재 시도중이며 아직 확정되지 않은 방안들입니다.</p>

<h5>1주일에 한번씩 한일/할일 공유</h5>

<p>기본적으로 일주일에 한번 토요일밤에 행아웃을 통해 화상회의를 진행합니다.
그전에 facebook을 통해 각자 한일과 다음주에 할일을 적습니다.
이것은 정확하고 강압적으로 적는것이 아니라 우리가 <strong>함께 일하고 있다</strong>라는 걸 상기시켜주는 목적이 더 큽니다.
부담갖지 말아요~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make a new post]]></title>
    <link href="http://remotty.github.io/blog/2013/12/09/how-to-make-a-new-post/"/>
    <updated>2013-12-09T21:28:37+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/09/how-to-make-a-new-post</id>
    <content type="html"><![CDATA[<p>Octopress 블로그에 글 작성하는 방법을 정리해 봅니다.</p>

<!-- more -->


<ul>
<li>Github 저장소를 clone 합니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:remotty/remotty.github.io.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>source 브랜치로 checkout 합니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>아래의 명령을 실행하여 Github Pages로 배포를 위한 준비작업을 합니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:remotty/remotty.github.io.git _deploy
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>새로운 글을 작성하기 위해서는 아래와 같이 명령을 실행합니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>글을 작성하고 확인해 봅니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>글을 작성하고 저장한 후 아래의 명령을 실행하면 바로 Github 저장소로 배포됩니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>source 브랜치의 변경내용을 커밋하고 git push 합니다.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git ci -m <span class="s2">&quot;새글 추가함&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shomney Development Stack]]></title>
    <link href="http://remotty.github.io/blog/2013/12/09/shomney-development-stack/"/>
    <updated>2013-12-09T20:48:17+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/09/shomney-development-stack</id>
    <content type="html"><![CDATA[<p>Shomney Development Stack</p>

<ul>
<li>ruby on rails 4</li>
<li>angularjs 1.2.x</li>
<li>sqlite3(dev)/mysql(production)</li>
<li>bootstrap3</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started]]></title>
    <link href="http://remotty.github.io/blog/2013/12/09/getting-started/"/>
    <updated>2013-12-09T19:16:52+09:00</updated>
    <id>http://remotty.github.io/blog/2013/12/09/getting-started</id>
    <content type="html"><![CDATA[<p>Remotty.com의 Tech Blog를 시작합니다.</p>
]]></content>
  </entry>
  
</feed>
